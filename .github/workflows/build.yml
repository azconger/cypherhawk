name: Build and Test

on:
  push:
    branches: [ main, develop, 'devops/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        fail_ci_if_error: false

    - name: Run go vet
      run: go vet ./...

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not properly formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Check go mod tidy
      run: |
        go mod tidy
        # Check for changes to tracked files only (ignore coverage.out and other untracked files)
        CHANGES=$(git diff --name-only)
        if [ -n "$CHANGES" ]; then
          echo "go mod tidy made changes to tracked files:"
          echo "$CHANGES"
          git diff
          exit 1
        else
          echo "go mod tidy is clean - no changes to tracked files"
        fi

  build-matrix:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
        check-latest: true

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        if [ "${{ matrix.goos }}" = "windows" ]; then
          EXT=".exe"
        else
          EXT=""
        fi
        go build -ldflags="-s -w" -o dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}${EXT} ./cmd/dpi-hawk

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dpi-hawk-*
        retention-days: 7

  integration-test:
    runs-on: ${{ matrix.os }}
    needs: build-matrix
    strategy:
      matrix:
        include:
          # Test native architectures on actual OS
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            native: true
          - os: macos-latest  
            goos: darwin
            goarch: amd64
            native: true
          - os: windows-latest
            goos: windows
            goarch: amd64
            native: true
          # Test ARM64 builds exist (GitHub doesn't have ARM64 runners yet)
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            native: false
          - os: ubuntu-latest
            goos: darwin
            goarch: arm64
            native: false
          - os: ubuntu-latest
            goos: windows
            goarch: arm64
            native: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}

    - name: Test native binary execution (Unix)
      if: matrix.native && runner.os != 'Windows'
      run: |
        chmod +x dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}
        ./dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }} --help
        ./dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }} --version
        echo "✅ Binary executes successfully on ${{ runner.os }}"

    - name: Test native binary execution (Windows)
      if: matrix.native && runner.os == 'Windows'
      run: |
        .\dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}.exe --help
        .\dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}.exe --version
        echo "✅ Binary executes successfully on Windows"

    - name: Verify cross-compiled binary exists
      if: ${{ !matrix.native }}
      run: |
        if [[ "${{ matrix.goos }}" == "windows" ]]; then
          FILE="dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
        else
          FILE="dpi-hawk-${{ matrix.goos }}-${{ matrix.goarch }}"
        fi
        
        if [[ -f "$FILE" ]]; then
          echo "✅ Cross-compiled binary exists: $FILE"
          ls -la "$FILE"
          echo "File size: $(wc -c < "$FILE") bytes"
        else
          echo "❌ Cross-compiled binary missing: $FILE"
          exit 1
        fi